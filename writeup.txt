
EN Barnett
Simon Boerwinkle

CS 5013
Project 1


Explanation of Knowledge Representation

The file KnowledgeRepTwo.java contains static methods that allow our agent access to information necessary in order to fulfil tasks in the space settlers arena. The inspiration for this knowledge representation was a relational model that was egocentric, although some additional morphing of the model was needed to increase its usefulness.

The knowledge is build around three basic tasks for the coop game. The ship will either be gathering resources, going to home base with the resources it has, or looking for energy. These states are represented in a hashmap of UUIDs to an enumerated type so that each ship on the team can have a different current state. The following egocentric functions allow each ship to find things that are near it:

myNearestBase returns the team base that is closest to a given ship.
myNearestRefuel returns either a base or a beacon that is closest to a given ship.
asteroidNearestBase returns the asteroid that is closes in distance to the home base.

In addition, there are boolean methods that tell the agent what is going on:

isBeaconNear returns true if there is an energy beacon inside of a small radius from a given ship.
isEnemyNear returns true for a given ship if it is near a ship not on this team.
ifMineableAsteroidAhead returns true if there exists a mineable asteroid within a cone of vision in front of the specified ship as it travels.
isOutOfGas returns true if a ship's energy is below a threshold.

All of the methods above, except for myNearestRefuel and isOutOfGas, store the object that caused the method to return or to return true in a hashmap where it is associated with the UUID of the ship the search was based on.

Lastly, a rudimentary attempt was made to calculate an intercept point for objects that are travelling in space so that a ship can find the object by driving to where it will be and not where it is right now. This method is called getObjectIntercept and returns a calculated position based on an object.


Explanation of Heuristic

The client code would give the same strategy to any number of ships on the team, but for now there is only one ship. The ship starts out in the get resources state, which seeks out the resource-bearing asteroid that is closest to home base. Once it has resources aboard the state changes to a homing state where it seeks to deposit the resources on the base. If at any time the ship passes in close proximity to an energy beacon it will temporarily interrupt its search in order to get the energy. Otherwise it only seeks out energy, be it from beacon or a base, when it is low on fuel.


Justification of Choices

The knowledge representation does ignore objects such as asteroids that are not mineable, but it still provides good information that works in the majority of cases given the object density of the average playing field. One of the more important choices was to go for the resources that were closes to base because energy management is rudimentary and the ship many times would run out of energy before making it back to base. Seeking resources that are close to the drop point increases drastically the probability of being able to deposit them. Other than that, all of the major elements of the game that are necessary for the team to score points in a basic way are included in the knowledge representation.

For the coop mode the heuristic can be quite simple and still work so the choice of the three ship states described above seems to provide the core steps needed to obtain points without getting lost in many other tasks or details. One slight deviation from the task it to pick up beacon en route, but we believe this to be an optimization of time spent navigating because it increases the chances of making it back to base successfully.


We chose the coop project path in order to focus on simple optimization and efficiency problems in resource collection without having to worry so much about adversarial strategy. Also, why not be peaceful in space since it's hard enough to survive in a vacuum as it is?